"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞–º–∏ Telegram-–±–æ—Ç–∞."""

from __future__ import annotations

from html import escape as html_escape
from typing import Optional

from telebot import types

from ...models import Dialog, MessageLog, db


class DialogHistoryHandlersMixin:
    """–°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤."""

    # NOTE[agent]: –£–¥–∞–ª–µ–Ω–∏–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ LLM.
    def _clear_previous_reply_markup(self, dialog: Dialog, chat_id: int) -> None:
        """–û—Ç–∫–ª—é—á–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É –≤—Å–µ—Ö —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""

        if not self._bot:
            return
        previous_responses = (
            MessageLog.query.filter(
                MessageLog.dialog_id == dialog.id,
                MessageLog.assistant_message_id.isnot(None),
            )
            .order_by(MessageLog.message_index.asc())
            .all()
        )
        for log_entry in previous_responses:
            if not log_entry.assistant_message_id:
                continue
            try:
                self._bot.edit_message_reply_markup(
                    chat_id=chat_id,
                    message_id=log_entry.assistant_message_id,
                    reply_markup=None,
                )
            except Exception:  # pylint: disable=broad-except
                self._get_logger().debug(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Å–æ–æ–±—â–µ–Ω–∏—è %s",
                    log_entry.assistant_message_id,
                    exc_info=True,
                )

    # NOTE[agent]: –£–¥–∞–ª—è–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏—à—ë–ª callback.
    def _remove_message_reply_markup(self, message: Optional[types.Message]) -> None:
        """–°–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—â—ë –¥–æ—Å—Ç—É–ø–Ω–æ."""

        if not self._bot or not message:
            return
        try:
            self._bot.edit_message_reply_markup(
                chat_id=message.chat.id,
                message_id=message.message_id,
                reply_markup=None,
            )
        except Exception:  # pylint: disable=broad-except
            self._get_logger().debug(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–æ–æ–±—â–µ–Ω–∏—è %s",
                message.message_id,
                exc_info=True,
            )

    # NOTE[agent]: –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏—Å—Ç–æ—Ä–∏–∏.
    def _delete_message_safely(self, message: Optional[types.Message]) -> None:
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—à–∏–±–∫–∏ Telegram API."""

        if not self._bot or not message:
            return
        try:
            self._bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except Exception:  # pylint: disable=broad-except
            self._get_logger().debug(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ %s",
                message.message_id,
                exc_info=True,
            )

    # NOTE[agent]: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ.
    def _handle_new_dialog(self, call: types.CallbackQuery) -> None:
        """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

        if self._respond_if_paused_callback(call):
            return
        user = self._get_or_create_user(call.from_user)
        self._remove_message_reply_markup(call.message)
        current_dialog = self._get_active_dialog(user)
        if current_dialog:
            current_dialog.close()
        new_dialog = Dialog(
            user_id=user.id,
            title="‚ú® –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥",
            telegram_chat_id=str(call.message.chat.id),
        )
        db.session.add(new_dialog)
        db.session.commit()
        if self._bot:
            self._bot.answer_callback_query(call.id, text="‚ú® –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")
        self._send_message(
            chat_id=call.message.chat.id,
            text="üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –±–µ—Å–µ–¥—É.",
            parse_mode="HTML",
            reply_markup=self._build_inline_keyboard(),
        )

    # NOTE[agent]: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤.
    def _handle_dialog_history(self, call: types.CallbackQuery) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–æ–≤."""

        if self._respond_if_paused_callback(call):
            return
        user = self._get_or_create_user(call.from_user)
        if not self._bot:
            return
        self._remove_message_reply_markup(call.message)
        dialogs = self._get_recent_dialogs(user)
        if not dialogs:
            self._bot.answer_callback_query(call.id, text="–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
            return
        history_keyboard = self._build_history_keyboard(user)
        self._bot.answer_callback_query(call.id)
        self._send_message(
            chat_id=call.message.chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ª–æ–≥ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏:",
            parse_mode="HTML",
            reply_markup=history_keyboard,
        )

    # NOTE[agent]: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.
    def _handle_switch_dialog(self, call: types.CallbackQuery) -> None:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏."""

        if self._respond_if_paused_callback(call):
            return
        if not self._bot:
            return
        self._bot.answer_callback_query(call.id)
        user = self._get_or_create_user(call.from_user)
        dialog_id = self._extract_dialog_id(call.data)
        if dialog_id is None:
            self._send_message(
                chat_id=call.message.chat.id,
                text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥",
                parse_mode="HTML",
            )
            return
        target_dialog = Dialog.query.filter_by(id=dialog_id, user_id=user.id).first()
        if not target_dialog:
            self._send_message(
                chat_id=call.message.chat.id,
                text="–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                parse_mode="HTML",
            )
            return
        if not target_dialog.telegram_chat_id:
            target_dialog.telegram_chat_id = str(call.message.chat.id)
        self._activate_dialog(user, target_dialog)
        history_message = call.message
        chat_id: int | None = None
        if history_message:
            chat_id = history_message.chat.id
        elif target_dialog.telegram_chat_id:
            try:
                chat_id = int(target_dialog.telegram_chat_id)
            except (TypeError, ValueError):
                chat_id = None
        if chat_id is None:
            chat_id = call.from_user.id
        self._delete_message_safely(history_message)
        reply_message_id, last_text = self._get_last_message_reference(target_dialog)
        title = self._format_dialog_title(target_dialog)
        base_text = f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –¥–∏–∞–ª–æ–≥ <b>¬´{html_escape(title)}¬ª</b>."
        reply_markup = self._build_inline_keyboard()
        if reply_message_id is not None:
            self._send_message(
                chat_id=chat_id,
                text=base_text,
                parse_mode="HTML",
                reply_markup=reply_markup,
                reply_to_message_id=reply_message_id,
                escape=False,
            )
            return
        snippet = last_text or ""
        if snippet:
            escaped_lines = [
                f"&gt; {html_escape(line)}" if line else "&gt;"
                for line in snippet.splitlines()
            ] or ["&gt;"]
            quoted_snippet = "\n".join(escaped_lines)
            message_text = (
                f"{base_text}\n"
                "üì© –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
                f"<pre>{quoted_snippet}</pre>"
            )
        else:
            message_text = (
                f"{base_text}\n"
                "üö´ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            )
        self._send_message(
            chat_id=chat_id,
            text=message_text,
            parse_mode="HTML",
            reply_markup=reply_markup,
            escape=False,
        )

    def _extract_dialog_id(self, payload: Optional[str]) -> Optional[int]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–∏–∞–ª–æ–≥–∞ –∏–∑ callback-–¥–∞–Ω–Ω—ã—Ö."""

        if not payload:
            return None
        parts = payload.split(":")
        if len(parts) != 3:
            return None
        try:
            return int(parts[-1])
        except ValueError:
            return None
