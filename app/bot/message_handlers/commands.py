"""–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram-–±–æ—Ç–∞."""

from __future__ import annotations

from typing import Dict, Set

from telebot import TeleBot, types

from ...models import BotCommand


class CommandHandlersMixin:
    """–°–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥."""

    # NOTE[agent]: –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ TeleBot –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
    def _create_bot(self, token: str) -> TeleBot:
        """–°–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä TeleBot –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏."""

        bot = TeleBot(token, parse_mode="HTML")

        with self._app_context():
            custom_commands = list(BotCommand.query.all())

        custom_command_mapping: Dict[str, str] = {}
        for command in custom_commands:
            command_name = (command.name or "").lstrip("/").lower()
            if not command_name:
                continue
            custom_command_mapping[command_name] = command.response_text

        known_commands: Set[str] = {"start", "help", *custom_command_mapping.keys()}

        @bot.message_handler(commands=["start"])
        def handle_start(message: types.Message) -> None:
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""

            with self._app_context():
                self._handle_start(message)

        @bot.message_handler(commands=["help"])
        def handle_help(message: types.Message) -> None:
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help."""

            with self._app_context():
                self._handle_help(message)

        for command_name, response_text in custom_command_mapping.items():

            @bot.message_handler(commands=[command_name])
            def handle_custom_command(
                message: types.Message,
                prepared_response: str = response_text,
            ) -> None:
                """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã."""

                with self._app_context():
                    if self._respond_if_paused(message.chat.id):
                        return
                    self._send_message(
                        chat_id=message.chat.id,
                        text=prepared_response,
                        parse_mode="HTML",
                        escape=False,
                    )

        @bot.message_handler(
            func=lambda message, commands=known_commands: self._is_unknown_command(message, commands)
        )
        def handle_unknown_command(message: types.Message) -> None:
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."""

            with self._app_context():
                self._handle_unknown_command(message)

        @bot.callback_query_handler(func=lambda call: call.data == "dialog:new")
        def handle_new_dialog(call: types.CallbackQuery) -> None:
            """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞."""

            with self._app_context():
                self._handle_new_dialog(call)

        @bot.callback_query_handler(func=lambda call: call.data == "dialog:history")
        def handle_dialog_history(call: types.CallbackQuery) -> None:
            """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

            with self._app_context():
                self._handle_dialog_history(call)

        @bot.callback_query_handler(func=lambda call: call.data.startswith("dialog:switch:"))
        def handle_dialog_switch(call: types.CallbackQuery) -> None:
            """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

            with self._app_context():
                self._handle_switch_dialog(call)

        @bot.message_handler(
            content_types=["text"],
            func=lambda message: self._extract_command(message.text or "") is None,
        )
        def handle_text(message: types.Message) -> None:
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

            with self._app_context():
                self._handle_message(message)

        return bot

    # NOTE[agent]: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–≤–∏—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    def _handle_start(self, message: types.Message) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

        user = self._get_or_create_user(message.from_user)
        if self._respond_if_paused(message.chat.id):
            return
        text = (
            "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b>\n\n"
            "–Ø ‚Äî –±–æ—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é GPT.\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∑–∞–¥–∞—á—É –∏–ª–∏ –∏–¥–µ—é ‚Äî –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø—Ä—è–º–æ –∑–¥–µ—Å—å, –≤ —á–∞—Ç–µ.\n\n"
            "üìå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å –ø—Ä–æ—Å—Ç–æ–≥–æ:\n"
            "¬´–°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –¥–µ–ª –Ω–∞ –∑–∞–≤—Ç—Ä–∞¬ª\n"
            "–∏–ª–∏\n"
            "¬´–û–±—ä—è—Å–Ω–∏ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É SEO –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π —Ä–µ–∫–ª–∞–º–æ–π –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏¬ª.\n\n"
            "‚ú® –ß–µ–º —Ç–æ—á–Ω–µ–µ –∑–∞–ø—Ä–æ—Å, —Ç–µ–º –ø–æ–ª–µ–∑–Ω–µ–µ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç.\n\n"
            "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–æ–º, –∫–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ /help"
        )
        self._send_message(
            chat_id=message.chat.id,
            text=text,
            parse_mode="HTML",
            escape=False,
            reply_markup=self._build_inline_keyboard(),
        )
        self._get_logger().info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s (%s) –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É", user.telegram_id, user.username)

    # NOTE[agent]: –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –±–æ—Ç–∞.
    def _handle_help(self, message: types.Message) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞."""

        if self._respond_if_paused(message.chat.id):
            return
        help_text = (
            "‚úçÔ∏è <b>–ö–∞–∫ –∑–∞–¥–∞–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã</b>\n\n"
            "<b>–•–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —á—ë—Ç–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.</b>\n"
            "–ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Ä–∞–∑–º—ã—Ç–∞, –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–∏—Ç—Å—è –æ–±—â–∏–º. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ: —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ, –≤ –∫–∞–∫–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏ –¥–ª—è –∫–∞–∫–æ–π —Ü–µ–ª–∏. –ß–µ–º —è—Å–Ω–µ–µ –≤–æ–ø—Ä–æ—Å ‚Äî —Ç–µ–º —Ç–æ—á–Ω–µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n\n"
            "<b>–°—Ç–∞–≤—å—Ç–µ –∑–Ω–∞–∫ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ.</b>\n"
            "–ò–Ω–∞—á–µ –±–æ—Ç –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–∞—à—É —Ñ—Ä–∞–∑—É –≤–º–µ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∞.\n\n"
            "<b>–£—Ç–æ—á–Ω—è–π—Ç–µ –æ–±—ä—ë–º –∏ —Ñ–æ—Ä–º–∞—Ç.</b>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 200 —Å–ª–æ–≤, 500 —Å–∏–º–≤–æ–ª–æ–≤, 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –§–æ—Ä–º–∞—Ç ‚Äî —Å–ø–∏—Å–æ–∫, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –ø–∏—Å—å–º–æ, –∫–æ–¥.\n\n"
            "<b>–î–æ–±–∞–≤–ª—è–π—Ç–µ –¥–µ—Ç–∞–ª–∏.</b>\n"
            "‚ùå ¬´–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —Ü–≤–µ—Ç—ã¬ª\n"
            "‚úÖ ¬´–°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –∏–∑ 5 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º —É—Ö–æ–¥–∞¬ª.\n\n"
            "<b>–§–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.</b>\n"
            "–ë–æ—Ç –Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—É—Å–æ—á–∫–æ–≤ –≤ –µ–¥–∏–Ω—É—é –∑–∞–¥–∞—á—É.\n\n"
            "‚ú® –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: ¬´–ó–∞–¥–∞–π –º–Ω–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã —è –ø–æ–ª—É—á–∏–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç¬ª."
        )
        self._send_message(
            chat_id=message.chat.id,
            text=help_text,
            parse_mode="HTML",
            escape=False,
            reply_markup=self._build_inline_keyboard(),
        )

    def _extract_command(self, text: str) -> str | None:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ –∑–Ω–∞–∫–∞ '/'."""

        if not text or not text.startswith("/"):
            return None
        command = text.split()[0][1:]
        if "@" in command:
            command = command.split("@", 1)[0]
        return command.lower()

    def _is_unknown_command(self, message: types.Message, known_commands: Set[str]) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ."""

        command = self._extract_command(message.text or "")
        return command is not None and command not in known_commands

    def _handle_unknown_command(self, message: types.Message) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–µ."""

        if self._respond_if_paused(message.chat.id):
            return
        self._send_message(
            chat_id=message.chat.id,
            text="–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            parse_mode="HTML",
        )
