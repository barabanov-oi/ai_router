"""–ú–∏–∫—Å–∏–Ω —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram-–±–æ—Ç–∞."""

from __future__ import annotations

import threading

from typing import List, Optional

from telebot import TeleBot, types

from ..models import Dialog, MessageLog, db


class MessageHandlingMixin:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –±–æ—Ç–∞."""

    # NOTE[agent]: –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ TeleBot –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
    def _create_bot(self, token: str) -> TeleBot:
        """–°–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä TeleBot –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏."""

        bot = TeleBot(token, parse_mode="MarkdownV2")
        known_commands = {"start", "help"}

        @bot.message_handler(commands=["start"])
        def handle_start(message: types.Message) -> None:
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""

            with self._app_context():
                self._handle_start(message)

        @bot.message_handler(commands=["help"])
        def handle_help(message: types.Message) -> None:
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help."""

            with self._app_context():
                self._handle_help(message)

        @bot.message_handler(
            func=lambda message, commands=known_commands: self._is_unknown_command(message, commands)
        )
        def handle_unknown_command(message: types.Message) -> None:
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."""

            with self._app_context():
                self._handle_unknown_command(message)

        @bot.callback_query_handler(func=lambda call: call.data == "dialog:new")
        def handle_new_dialog(call: types.CallbackQuery) -> None:
            """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞."""

            with self._app_context():
                self._handle_new_dialog(call)

        @bot.callback_query_handler(func=lambda call: call.data == "dialog:history")
        def handle_dialog_history(call: types.CallbackQuery) -> None:
            """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

            with self._app_context():
                self._handle_dialog_history(call)

        @bot.callback_query_handler(func=lambda call: call.data.startswith("dialog:switch:"))
        def handle_dialog_switch(call: types.CallbackQuery) -> None:
            """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

            with self._app_context():
                self._handle_switch_dialog(call)

        @bot.message_handler(
            content_types=["text"],
            func=lambda message: self._extract_command(message.text or "") is None,
        )
        def handle_text(message: types.Message) -> None:
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""

            with self._app_context():
                self._handle_message(message)

        return bot

    # NOTE[agent]: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–≤–∏—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    def _handle_start(self, message: types.Message) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

        user = self._get_or_create_user(message.from_user)
        text = (
            "üëã *–ü—Ä–∏–≤–µ—Ç!*\n"
            "\n"
            "–Ø ‚Äî –±–æ—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é GPT.\n"
            "\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∑–∞–¥–∞—á—É –∏–ª–∏ –∏–¥–µ—é ‚Äî –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø—Ä—è–º–æ –∑–¥–µ—Å—å, –≤ —á–∞—Ç–µ.\n"
            "\n\n"
            "üìå –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å –ø—Ä–æ—Å—Ç–æ–≥–æ:\n"
            "¬´–°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –¥–µ–ª –Ω–∞ –∑–∞–≤—Ç—Ä–∞¬ª\n"
            "–∏–ª–∏\n"
            "¬´–û–±—ä—è—Å–Ω–∏ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É SEO –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π —Ä–µ–∫–ª–∞–º–æ–π –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏¬ª.\n"
            "\n\n"
            "‚ú® –ß–µ–º —Ç–æ—á–Ω–µ–µ –∑–∞–ø—Ä–æ—Å, —Ç–µ–º –ø–æ–ª–µ–∑–Ω–µ–µ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç.\n"
            "\n\n"
            "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–æ–º, –∫–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ /help"
        )
        if self._bot:
            self._bot.send_message(chat_id=message.chat.id, text=text, parse_mode="MarkdownV2")
        self._get_logger().info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s (%s) –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É", user.telegram_id, user.username)

    # NOTE[agent]: –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –±–æ—Ç–∞.
    def _handle_help(self, message: types.Message) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞."""

        help_text = (
            "‚úçÔ∏è *–ö–∞–∫ –∑–∞–¥–∞–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã*\n"
            "\n\n"
            "*–•–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —á—ë—Ç–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.*\n"
            "–ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Ä–∞–∑–º—ã—Ç–∞, –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–∏—Ç—Å—è –æ–±—â–∏–º. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ: —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ, –≤ –∫–∞–∫–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏ –¥–ª—è –∫–∞–∫–æ–π —Ü–µ–ª–∏. –ß–µ–º —è—Å–Ω–µ–µ –≤–æ–ø—Ä–æ—Å ‚Äî —Ç–µ–º —Ç–æ—á–Ω–µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n"
            "\n"
            "*–°—Ç–∞–≤—å—Ç–µ –∑–Ω–∞–∫ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ.*\n"
            "–ò–Ω–∞—á–µ –±–æ—Ç –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–∞—à—É —Ñ—Ä–∞–∑—É –≤–º–µ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∞.\n"
            "\n"
            "*–£—Ç–æ—á–Ω—è–π—Ç–µ –æ–±—ä—ë–º –∏ —Ñ–æ—Ä–º–∞—Ç.*  \n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 200 —Å–ª–æ–≤, 500 —Å–∏–º–≤–æ–ª–æ–≤, 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –§–æ—Ä–º–∞—Ç ‚Äî —Å–ø–∏—Å–æ–∫, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –ø–∏—Å—å–º–æ, –∫–æ–¥.  \n"
            "\n"
            "*–î–æ–±–∞–≤–ª—è–π—Ç–µ –¥–µ—Ç–∞–ª–∏.*\n"
            "‚ùå ¬´–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —Ü–≤–µ—Ç—ã¬ª  \n"
            "‚úÖ ¬´–°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –∏–∑ 5 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º —É—Ö–æ–¥–∞¬ª.  \n"
            "\n"
            "*–§–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.* \n"
            "–ë–æ—Ç –Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—É—Å–æ—á–∫–æ–≤ –≤ –µ–¥–∏–Ω—É—é –∑–∞–¥–∞—á—É.\n"
            "\n"
            "‚ú® –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: ¬´–ó–∞–¥–∞–π –º–Ω–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã —è –ø–æ–ª—É—á–∏–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç¬ª."
        )
        if self._bot:
            self._bot.send_message(chat_id=message.chat.id, text=help_text, parse_mode="MarkdownV2")

    def _extract_command(self, text: str) -> str | None:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ –∑–Ω–∞–∫–∞ '/'."""

        if not text or not text.startswith("/"):
            return None
        command = text.split()[0][1:]
        if "@" in command:
            command = command.split("@", 1)[0]
        return command.lower()

    def _is_unknown_command(self, message: types.Message, known_commands: set[str]) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ."""

        command = self._extract_command(message.text or "")
        return command is not None and command not in known_commands

    def _handle_unknown_command(self, message: types.Message) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–µ."""

        if self._bot:
            self._bot.send_message(
                chat_id=message.chat.id,
                text="–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                parse_mode="MarkdownV2",
            )

    # NOTE[agent]: –†–∞–∑–±–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –ª–∏–º–∏—Ç–æ–≤ Telegram.
    def _prepare_response_chunks(self, text: str) -> List[str]:
        """–î–µ–ª–∏—Ç –æ—Ç–≤–µ—Ç LLM –Ω–∞ —á–∞—Å—Ç–∏ —Å —É—á—ë—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram."""

        if len(text) <= 4096:
            return [text]

        chunks: List[str] = []
        remaining = text
        continuation = "..."
        first_chunk = True

        while remaining:
            if first_chunk:
                needs_split = len(remaining) > 4096
                suffix = continuation if needs_split else ""
                available = 4096 - len(suffix)
                prefix = ""
            else:
                needs_split = len(remaining) > (4096 - len(continuation))
                prefix = continuation
                suffix = continuation if needs_split else ""
                available = 4096 - len(prefix) - len(suffix)

            if available <= 0:
                available = 4096
                prefix = ""
                suffix = ""

            if len(remaining) <= available:
                core = remaining
                remaining = ""
            else:
                core = remaining[:available]
                split_pos = core.rfind(" ")
                if split_pos <= 0:
                    split_pos = available
                core = core[:split_pos].rstrip()
                remaining = remaining[split_pos:].lstrip()

            chunk = f"{prefix}{core}{suffix}"
            chunks.append(chunk)
            first_chunk = False

            if not remaining:
                break

        return chunks

    # NOTE[agent]: –£–¥–∞–ª–µ–Ω–∏–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ LLM.
    def _clear_previous_reply_markup(self, dialog: Dialog, chat_id: int) -> None:
        """–û—Ç–∫–ª—é—á–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É –≤—Å–µ—Ö —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""

        if not self._bot:
            return
        previous_responses = (
            MessageLog.query.filter(
                MessageLog.dialog_id == dialog.id,
                MessageLog.assistant_message_id.isnot(None),
            )
            .order_by(MessageLog.message_index.asc())
            .all()
        )
        for log_entry in previous_responses:
            if not log_entry.assistant_message_id:
                continue
            try:
                self._bot.edit_message_reply_markup(
                    chat_id=chat_id,
                    message_id=log_entry.assistant_message_id,
                    reply_markup=None,
                )
            except Exception:  # pylint: disable=broad-except
                self._get_logger().debug(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Å–æ–æ–±—â–µ–Ω–∏—è %s",
                    log_entry.assistant_message_id,
                    exc_info=True,
                )

    # NOTE[agent]: –£–¥–∞–ª—è–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏—à—ë–ª callback.
    def _remove_message_reply_markup(self, message: Optional[types.Message]) -> None:
        """–°–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—â—ë –¥–æ—Å—Ç—É–ø–Ω–æ."""

        if not self._bot or not message:
            return
        try:
            self._bot.edit_message_reply_markup(
                chat_id=message.chat.id,
                message_id=message.message_id,
                reply_markup=None,
            )
        except Exception:  # pylint: disable=broad-except
            self._get_logger().debug(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–æ–æ–±—â–µ–Ω–∏—è %s",
                message.message_id,
                exc_info=True,
            )

    # NOTE[agent]: –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏—Å—Ç–æ—Ä–∏–∏.
    def _delete_message_safely(self, message: Optional[types.Message]) -> None:
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—à–∏–±–∫–∏ Telegram API."""

        if not self._bot or not message:
            return
        try:
            self._bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except Exception:  # pylint: disable=broad-except
            self._get_logger().debug(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ %s",
                message.message_id,
                exc_info=True,
            )

    # NOTE[agent]: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ.
    def _handle_new_dialog(self, call: types.CallbackQuery) -> None:
        """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

        user = self._get_or_create_user(call.from_user)
        self._remove_message_reply_markup(call.message)
        current_dialog = self._get_active_dialog(user)
        if current_dialog:
            current_dialog.close()
        new_dialog = Dialog(
            user_id=user.id,
            title="‚ú® –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥",
            telegram_chat_id=str(call.message.chat.id),
        )
        db.session.add(new_dialog)
        db.session.commit()
        if self._bot:
            self._bot.answer_callback_query(call.id, text="‚ú® –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥")
            self._bot.send_message(
                chat_id=call.message.chat.id,
                text="üßπ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –±–µ—Å–µ–¥—É.",
                parse_mode="MarkdownV2",
                reply_markup=self._build_inline_keyboard(),
            )

    # NOTE[agent]: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤.
    def _handle_dialog_history(self, call: types.CallbackQuery) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–æ–≤."""

        user = self._get_or_create_user(call.from_user)
        if not self._bot:
            return
        self._remove_message_reply_markup(call.message)
        dialogs = self._get_recent_dialogs(user)
        if not dialogs:
            self._bot.answer_callback_query(call.id, text="–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
            return
        history_keyboard = self._build_history_keyboard(user)
        self._bot.answer_callback_query(call.id)
        self._bot.send_message(
            chat_id=call.message.chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ª–æ–≥ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏:",
            reply_markup=history_keyboard,
        )

    # NOTE[agent]: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.
    def _handle_switch_dialog(self, call: types.CallbackQuery) -> None:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏."""

        if not self._bot:
            return
        self._bot.answer_callback_query(call.id)
        user = self._get_or_create_user(call.from_user)
        dialog_id = self._extract_dialog_id(call.data)
        if dialog_id is None:
            self._bot.send_message(chat_id=call.message.chat.id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏–∞–ª–æ–≥")
            return
        target_dialog = Dialog.query.filter_by(id=dialog_id, user_id=user.id).first()
        if not target_dialog:
            self._bot.send_message(chat_id=call.message.chat.id, text="–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        if not target_dialog.telegram_chat_id:
            target_dialog.telegram_chat_id = str(call.message.chat.id)
        self._activate_dialog(user, target_dialog)
        history_message = call.message
        chat_id: int | None = None
        if history_message:
            chat_id = history_message.chat.id
        elif target_dialog.telegram_chat_id:
            try:
                chat_id = int(target_dialog.telegram_chat_id)
            except (TypeError, ValueError):
                chat_id = None
        if chat_id is None:
            chat_id = call.from_user.id
        self._delete_message_safely(history_message)
        reply_message_id, last_text = self._get_last_message_reference(target_dialog)
        title = self._format_dialog_title(target_dialog)
        base_text = f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –¥–∏–∞–ª–æ–≥ *¬´{title}¬ª*."
        reply_markup = self._build_inline_keyboard()
        if reply_message_id is not None:
            self._bot.send_message(
                chat_id=chat_id,
                text=base_text,
                reply_markup=reply_markup,
                reply_to_message_id=reply_message_id,
            )
            return
        snippet = last_text or ""
        if snippet:
            snippet = snippet.replace('\n', '\n>')
            message_text = f"{base_text}\nüì© –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{snippet}"
        else:
            message_text = f"{base_text}\nüö´ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        self._bot.send_message(
            chat_id=chat_id,
            text=message_text,
            reply_markup=reply_markup,
        )

    # NOTE[agent]: –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    def _handle_message(self, message: types.Message) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç LLM."""

        user = self._get_or_create_user(message.from_user)
        if not user.is_active:
            if self._bot:
                self._bot.send_message(
                    chat_id=message.chat.id,
                    text="–í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode="MarkdownV2",
                )
            return

        dialog = self._get_active_dialog(user)
        if not dialog:
            dialog = Dialog(
                user_id=user.id,
                title="–î–∏–∞–ª–æ–≥",
                telegram_chat_id=str(message.chat.id),
            )
            db.session.add(dialog)
            db.session.commit()
        elif not dialog.telegram_chat_id:
            dialog.telegram_chat_id = str(message.chat.id)

        message_index = MessageLog.query.filter_by(dialog_id=dialog.id).count() + 1
        log_entry = MessageLog(
            dialog_id=dialog.id,
            user_id=user.id,
            message_index=message_index,
            user_message=message.text,
            mode=user.preferred_mode,
            user_message_id=message.message_id,
        )
        db.session.add(log_entry)
        user.touch()
        if message_index == 1 and message.text:
            dialog.title = " ".join(message.text.split())[:255]
        db.session.commit()

        typing_stop_event: threading.Event | None = None
        typing_thread: threading.Thread | None = None
        if self._bot:
            self._bot.send_chat_action(message.chat.id, "typing")

            typing_stop_event = threading.Event()

            def _keep_typing_indicator() -> None:
                """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ "typing", –ø–æ–∫–∞ –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è."""

                # NOTE[agent]: –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ü–∏—é –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞.
                while not typing_stop_event.wait(4.0):
                    try:
                        if not self._bot:
                            break
                        self._bot.send_chat_action(message.chat.id, "typing")
                    except Exception:  # pylint: disable=broad-except
                        self._get_logger().debug(
                            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ü–∏—é –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞", exc_info=True
                        )
                        break

            typing_thread = threading.Thread(
                target=_keep_typing_indicator,
                name="telegram-typing-indicator",
                daemon=True,
            )
            typing_thread.start()
        try:
            response_text = self._query_llm(dialog, log_entry)
            db.session.refresh(log_entry)
            usage_summary = self._format_usage_summary(dialog, log_entry)
            response_with_usage = f"{response_text}\n\n{usage_summary}" if response_text else usage_summary
            reply_markup = self._build_inline_keyboard()
            if self._bot:
                self._clear_previous_reply_markup(dialog, message.chat.id)
                chunks = self._prepare_response_chunks(response_with_usage)
                last_message_id: Optional[int] = None
                for index, chunk in enumerate(chunks):
                    markup = reply_markup if index == len(chunks) - 1 else None
                    sent = self._bot.send_message(
                        chat_id=message.chat.id,
                        text=chunk,
                        reply_markup=markup,
                        parse_mode="MarkdownV2",
                    )
                    if markup is not None:
                        last_message_id = getattr(sent, "message_id", None)
                if last_message_id is not None:
                    log_entry.assistant_message_id = last_message_id
                    db.session.commit()
        except Exception as exc:  # pylint: disable=broad-except
            self._get_logger().exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ LLM")
            if self._bot:
                self._bot.send_message(
                    chat_id=message.chat.id,
                    text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {exc}",
                    parse_mode="MarkdownV2",
                )
        finally:
            if typing_stop_event:
                typing_stop_event.set()
            if typing_thread:
                typing_thread.join(timeout=2.0)

    def _extract_dialog_id(self, payload: Optional[str]) -> Optional[int]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–∏–∞–ª–æ–≥–∞ –∏–∑ callback-–¥–∞–Ω–Ω—ã—Ö."""

        if not payload:
            return None
        parts = payload.split(":")
        if len(parts) != 3:
            return None
        try:
            return int(parts[-1])
        except ValueError:
            return None
